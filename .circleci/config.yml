orbs:
  aws-cli: circleci/aws-cli@3.1.1
  slack: circleci/slack@4.10.1
  codecov: codecov/codecov@3.2.3
version: 2.1
executors:
  app-executor:
    docker:
      - image: cimg/node:16.16.0
      - image: cimg/redis:7.0.2
      - image: 'cibuilds/base:latest'
    working_directory: ~/repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest
  slack-executor:
    docker:
      - image: 'cibuilds/base:latest'
    resource_class: small

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &zip-project
    run:
      name: Zip Project
      command: |
          rm -rf node_modules
          zip chatapp.zip -r .
          echo "Zip successful"
  - &notify-on-fail
    slack/notify:
        event: fail
        channel: 'chat-app'
        template: ''
        custom: |
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Job Failed. üî¥",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Job*: ${CIRCLE_JOB}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch*:\n$CIRCLE_BRANCH"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*When*:\n$(date +'%m/%d/%Y %T')"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                ]
              }
            ]
          }

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint:check
      - *notify-on-fail

  code-formatter-check:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run prettier:check
      - *notify-on-fail

  unit-test:
    executor: app-executor
    steps:
      - checkout
      - setup_remote_docker
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Start Redis Server
          command: docker run --name chatapp-redis -p 6379:6379 -d redis
          background: true
      - run:
          name: Start Server
          command: |
            sleep 3
            npm run dev
          background: true
      - run:
          name: Run Unit Test
          command: |
            sleep 3
            npm run test
      - codecov/upload
      - *notify-on-fail

  upload-project-to-s3:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - *zip-project
      - run:
          name: Upload Project to S3
          command: |
            aws --region eu-central-1 s3 cp chatapp.zip s3://chatapp-server-${CIRCLE_BRANCH}-app
      - *notify-on-fail

  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Validate & Format
          command: |
            cd deployment/
            terraform init -backend=false
            terraform validate
            terraform fmt
      - *notify-on-fail

  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Plan
          command: |
            cd deployment/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd deployment/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply --auto-approve
      - *notify-on-fail

  push-to-aws-code-deploy:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - *zip-project
      - run:
          name: Deploy Changes With AWS CodeDeploy
          command: |
            if [ "${CODE_DEPLOY_UPDATE}" == "true" ]
            then
                aws deploy create-deployment \
                    --region eu-central-1 \
                    --application-name chatapp-server-${CIRCLE_BRANCH}-app \
                    --deployment-config-name CodeDeployDefault.AllAtOnce \
                    --deployment-group-name chatapp-server-${CIRCLE_BRANCH}-group \
                    --s3-location bucket=chatapp-server-${CIRCLE_BRANCH}-app,bundleType=zip,key=chatapp.zip
            fi
      - *notify-on-fail

  # https://circleci.com/docs/slack-orb-tutorial
  notify-via-slack:
    executor: slack-executor
    steps:
      - run: echo "Slack notification"
      - slack/notify:
          event: 'always'
          channel: 'chat-app'
          template: ''
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${CIRCLE_BRANCH} branch backend deployment is complete. üëç",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*:\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When*:\n$(date +'%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  # This job will be manually executed
  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Destroy
          command: |
            cd deployment/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy --auto-approve
      - slack/notify:
          channel: 'chat-app'
          event: always
          template: basic_on_hold_1

workflows:
  build_and_deploy:
    jobs:
      - build
      # - linting:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      # - code-formatter-check:
      #     requires:
      #       - linting
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      - unit-test:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - notify-via-slack:
          requires:
            - unit-test
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      # - upload-project-to-s3:
      #       requires:
      #         - unit-test
      #       filters:
      #         branches:
      #           only:
      #             - develop
      #             - staging
      #             - master
      # - terraform-validate:
      #       requires:
      #         - upload-project-to-s3
      #       filters:
      #         branches:
      #           only:
      #             - develop
      #             - staging
      #             - master
      # - terraform-plan-and-apply:
      #       requires:
      #         - terraform-validate
      #       filters:
      #         branches:
      #           only:
      #             - develop
      #             - staging
      #             - master
      # - push-to-aws-code-deploy:
      #       requires:
      #         - terraform-plan-and-apply
      #       filters:
      #         branches:
      #           only:
      #             - develop
      #             - staging
      #             - master
      # - hold:
      #     type: approval
      #     requires:
      #       - push-to-aws-code-deploy
      # - terraform-destroy:
      #       requires:
      #         - hold
      #       filters:
      #         branches:
      #           only:
      #             - develop
      #             - staging
      #             - master
