orbs:
  aws-cli: circleci/aws-cli@3.1.1
version: 2.1
executors:
  app-executor:
    docker:
      - image: cimg/node:16.16.0
      - image: cimg/redis:7.0.2
    working_directory: ~/repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &zip-project
    run:
      name: Zip Project
      command: |
          rm -rf node_modules
          zip chatapp.zip -r .
          echo "Zip successful"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache

  unit-test:
    executor: app-executor
    steps:
      - checkout
      - setup_remote_docker
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Start Redis Server
          command: docker run --name chatapp-redis -p 6379:6379 -d redis
          background: true
      - run:
          name: Start Server
          command: |
            sleep 3
            npm run dev
          background: true
      - run:
          name: Run Unit Test
          command: |
            sleep 3
            npm run test

  upload-project-to-s3:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - *zip-project
      - run:
          name: Upload Project to S3
          command: |
            aws --region eu-central-1 s3 cp chatapp.zip s3://chatapp-server-${CIRCLE_BRANCH}-app

  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Validate & Format
          command: |
            cd deployment/
            terraform init -backend=false
            terraform validate
            terraform fmt

  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Plan
          command: |
            cd deployment/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd deployment/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply --auto-approve

  push-to-aws-code-deploy:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - *zip-project
      - run:
          name: Deploy Changes With AWS CodeDeploy
          command: |
            if [ "${CODE_DEPLOY_UPDATE}" == "true" ]
            then
                aws deploy create-deployment \
                    --region eu-central-1 \
                    --application-name chatapp-server-${CIRCLE_BRANCH}-app \
                    --deployment-config-name CodeDeployDefault.AllAtOnce \
                    --deployment-group-name chatapp-server-${CIRCLE_BRANCH}-group \
                    --s3-location bucket=chatapp-server-${CIRCLE_BRANCH}-app,bundleType=zip,key=chatapp.zip
            fi

  # This job will be manually executed
  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Destroy
          command: |
            cd deployment/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy --auto-approve

workflows:
  build_and_deploy:
    jobs:
      - build
      - unit-test:
            requires:
              - build
            filters:
              branches:
                only:
                  - develop
                  - staging
                  - master # Be sure to check if the branch is master or main
      - upload-project-to-s3:
            requires:
              - unit-test
            filters:
              branches:
                only:
                  - develop
                  - staging
                  - master
      - terraform-validate:
            requires:
              - upload-project-to-s3
            filters:
              branches:
                only:
                  - develop
                  - staging
                  - master
      - terraform-plan-and-apply:
            requires:
              - terraform-validate
            filters:
              branches:
                only:
                  - develop
                  - staging
                  - master
      - push-to-aws-code-deploy:
            requires:
              - terraform-plan-and-apply
            filters:
              branches:
                only:
                  - develop
                  - staging
                  - master
      - hold:
          type: approval
          requires:
            - push-to-aws-code-deploy
      - terraform-destroy:
            requires:
              - hold
            filters:
              branches:
                only:
                  - develop
                  - staging
                  - master
